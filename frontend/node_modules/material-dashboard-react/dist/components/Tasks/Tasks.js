"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Table = _interopRequireDefault(require("@material-ui/core/Table"));

var _TableRow = _interopRequireDefault(require("@material-ui/core/TableRow"));

var _TableBody = _interopRequireDefault(require("@material-ui/core/TableBody"));

var _TableCell = _interopRequireDefault(require("@material-ui/core/TableCell"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _tasksStyle = _interopRequireDefault(require("assets/jss/material-dashboard-react/components/tasksStyle.jsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Tasks =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Tasks, _React$Component);

  function Tasks() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Tasks);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tasks)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      checked: _this.props.checkedIndexes
    });

    _defineProperty(_assertThisInitialized(_this), "handleToggle", function (value) {
      return function () {
        var checked = _this.state.checked;
        var currentIndex = checked.indexOf(value);

        var newChecked = _toConsumableArray(checked);

        if (currentIndex === -1) {
          newChecked.push(value);
        } else {
          newChecked.splice(currentIndex, 1);
        }

        _this.setState({
          checked: newChecked
        });
      };
    });

    return _this;
  }

  _createClass(Tasks, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          classes = _this$props.classes,
          tasksIndexes = _this$props.tasksIndexes,
          tasks = _this$props.tasks,
          rtlActive = _this$props.rtlActive;
      var tableCellClasses = (0, _classnames2.default)(classes.tableCell, _defineProperty({}, classes.tableCellRTL, rtlActive));
      return _react.default.createElement(_Table.default, {
        className: classes.table
      }, _react.default.createElement(_TableBody.default, null, tasksIndexes.map(function (value) {
        return _react.default.createElement(_TableRow.default, {
          key: value,
          className: classes.tableRow
        }, _react.default.createElement(_TableCell.default, {
          className: tableCellClasses
        }, _react.default.createElement(_Checkbox.default, {
          checked: _this2.state.checked.indexOf(value) !== -1,
          tabIndex: -1,
          onClick: _this2.handleToggle(value),
          checkedIcon: _react.default.createElement(_Check.default, {
            className: classes.checkedIcon
          }),
          icon: _react.default.createElement(_Check.default, {
            className: classes.uncheckedIcon
          }),
          classes: {
            checked: classes.checked,
            root: classes.root
          }
        })), _react.default.createElement(_TableCell.default, {
          className: tableCellClasses
        }, tasks[value]), _react.default.createElement(_TableCell.default, {
          className: classes.tableActions
        }, _react.default.createElement(_Tooltip.default, {
          id: "tooltip-top",
          title: "Edit Task",
          placement: "top",
          classes: {
            tooltip: classes.tooltip
          }
        }, _react.default.createElement(_IconButton.default, {
          "aria-label": "Edit",
          className: classes.tableActionButton
        }, _react.default.createElement(_Edit.default, {
          className: classes.tableActionButtonIcon + " " + classes.edit
        }))), _react.default.createElement(_Tooltip.default, {
          id: "tooltip-top-start",
          title: "Remove",
          placement: "top",
          classes: {
            tooltip: classes.tooltip
          }
        }, _react.default.createElement(_IconButton.default, {
          "aria-label": "Close",
          className: classes.tableActionButton
        }, _react.default.createElement(_Close.default, {
          className: classes.tableActionButtonIcon + " " + classes.close
        })))));
      })));
    }
  }]);

  return Tasks;
}(_react.default.Component);

Tasks.propTypes = {
  classes: _propTypes.default.object.isRequired,
  tasksIndexes: _propTypes.default.arrayOf(_propTypes.default.number),
  tasks: _propTypes.default.arrayOf(_propTypes.default.node),
  rtlActive: _propTypes.default.bool,
  checkedIndexes: _propTypes.default.array
};

var _default = (0, _withStyles.default)(_tasksStyle.default)(Tasks);

exports.default = _default;