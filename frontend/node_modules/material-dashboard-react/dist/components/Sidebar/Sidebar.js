"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _Drawer = _interopRequireDefault(require("@material-ui/core/Drawer"));

var _Hidden = _interopRequireDefault(require("@material-ui/core/Hidden"));

var _List = _interopRequireDefault(require("@material-ui/core/List"));

var _ListItem = _interopRequireDefault(require("@material-ui/core/ListItem"));

var _ListItemText = _interopRequireDefault(require("@material-ui/core/ListItemText"));

var _Icon = _interopRequireDefault(require("@material-ui/core/Icon"));

var _AdminNavbarLinks = _interopRequireDefault(require("components/Navbars/AdminNavbarLinks.jsx"));

var _RTLNavbarLinks = _interopRequireDefault(require("components/Navbars/RTLNavbarLinks.jsx"));

var _sidebarStyle = _interopRequireDefault(require("assets/jss/material-dashboard-react/components/sidebarStyle.jsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Sidebar = function Sidebar(_ref) {
  var props = _extends({}, _ref);

  // verifies if routeName is the one active (in browser input)
  function activeRoute(routeName) {
    return window.location.href.indexOf(routeName) > -1 ? true : false;
  }

  var classes = props.classes,
      color = props.color,
      logo = props.logo,
      image = props.image,
      logoText = props.logoText,
      routes = props.routes;

  var links = _react.default.createElement(_List.default, {
    className: classes.list
  }, routes.map(function (prop, key) {
    var activePro = " ";
    var listItemClasses;

    if (prop.path === "/upgrade-to-pro") {
      activePro = classes.activePro + " ";
      listItemClasses = (0, _classnames.default)(_defineProperty({}, " " + classes[color], true));
    } else {
      listItemClasses = (0, _classnames.default)(_defineProperty({}, " " + classes[color], activeRoute(prop.layout + prop.path)));
    }

    var whiteFontClasses = (0, _classnames.default)(_defineProperty({}, " " + classes.whiteFont, activeRoute(prop.layout + prop.path)));
    return _react.default.createElement(_reactRouterDom.NavLink, {
      to: prop.layout + prop.path,
      className: activePro + classes.item,
      activeClassName: "active",
      key: key
    }, _react.default.createElement(_ListItem.default, {
      button: true,
      className: classes.itemLink + listItemClasses
    }, typeof prop.icon === "string" ? _react.default.createElement(_Icon.default, {
      className: (0, _classnames.default)(classes.itemIcon, whiteFontClasses, _defineProperty({}, classes.itemIconRTL, props.rtlActive))
    }, prop.icon) : _react.default.createElement(prop.icon, {
      className: (0, _classnames.default)(classes.itemIcon, whiteFontClasses, _defineProperty({}, classes.itemIconRTL, props.rtlActive))
    }), _react.default.createElement(_ListItemText.default, {
      primary: props.rtlActive ? prop.rtlName : prop.name,
      className: (0, _classnames.default)(classes.itemText, whiteFontClasses, _defineProperty({}, classes.itemTextRTL, props.rtlActive)),
      disableTypography: true
    })));
  }));

  var brand = _react.default.createElement("div", {
    className: classes.logo
  }, _react.default.createElement("a", {
    href: "https://www.creative-tim.com?ref=mdr-sidebar",
    className: (0, _classnames.default)(classes.logoLink, _defineProperty({}, classes.logoLinkRTL, props.rtlActive)),
    target: "_blank"
  }, _react.default.createElement("div", {
    className: classes.logoImage
  }, _react.default.createElement("img", {
    src: logo,
    alt: "logo",
    className: classes.img
  })), logoText));

  return _react.default.createElement("div", null, _react.default.createElement(_Hidden.default, {
    mdUp: true,
    implementation: "css"
  }, _react.default.createElement(_Drawer.default, {
    variant: "temporary",
    anchor: props.rtlActive ? "left" : "right",
    open: props.open,
    classes: {
      paper: (0, _classnames.default)(classes.drawerPaper, _defineProperty({}, classes.drawerPaperRTL, props.rtlActive))
    },
    onClose: props.handleDrawerToggle,
    ModalProps: {
      keepMounted: true // Better open performance on mobile.

    }
  }, brand, _react.default.createElement("div", {
    className: classes.sidebarWrapper
  }, props.rtlActive ? _react.default.createElement(_RTLNavbarLinks.default, null) : _react.default.createElement(_AdminNavbarLinks.default, null), links), image !== undefined ? _react.default.createElement("div", {
    className: classes.background,
    style: {
      backgroundImage: "url(" + image + ")"
    }
  }) : null)), _react.default.createElement(_Hidden.default, {
    smDown: true,
    implementation: "css"
  }, _react.default.createElement(_Drawer.default, {
    anchor: props.rtlActive ? "right" : "left",
    variant: "permanent",
    open: true,
    classes: {
      paper: (0, _classnames.default)(classes.drawerPaper, _defineProperty({}, classes.drawerPaperRTL, props.rtlActive))
    }
  }, brand, _react.default.createElement("div", {
    className: classes.sidebarWrapper
  }, links), image !== undefined ? _react.default.createElement("div", {
    className: classes.background,
    style: {
      backgroundImage: "url(" + image + ")"
    }
  }) : null)));
};

Sidebar.propTypes = {
  classes: _propTypes.default.object.isRequired,
  rtlActive: _propTypes.default.bool,
  handleDrawerToggle: _propTypes.default.func,
  bgColor: _propTypes.default.oneOf(["purple", "blue", "green", "orange", "red"]),
  logo: _propTypes.default.string,
  image: _propTypes.default.string,
  logoText: _propTypes.default.string,
  routes: _propTypes.default.arrayOf(_propTypes.default.object),
  open: _propTypes.default.bool
};

var _default = (0, _withStyles.default)(_sidebarStyle.default)(Sidebar);

exports.default = _default;